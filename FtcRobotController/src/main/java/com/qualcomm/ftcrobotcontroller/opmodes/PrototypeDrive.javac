package com.qualcomm.ftcrobotcontroller.opmodes;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.Range;

#define ever (;;)

#define sq(a) ((a)*(a))
#define sqrt Math.sqrt
#define bezier(t, p1, p2, p3) (sq(1-(t))*p1 + 2.0*(t)*(1-(t))*p2 + sq((t))*p3)
#define clamp(a, min, max) (((a) < min) ? min : (((a) > max) ? max : (a)))

public class PrototypeDrive extends LinearOpMode
{
    DcMotor left_drive;
    DcMotor right_drive;
    
    public PrototypeDrive() {}
    
    @Override public void runOpMode()
        throws InterruptedException
    {
        left_drive = hardwareMap.dcMotor.get("left_d");
        right_drive = hardwareMap.dcMotor.get("right_d");
        left_drive.setDirection(DcMotor.Direction.REVERSE);
        left_drive.setDirection(DcMotor.Direction.REVERSE);
        
        #define threshold 0.15f //TODO: figure out the real deadzone
        
        waitForStart();
        
        for ever
        {
            float stick_x = gamepad1.left_stick_x;
            float stick_y = -gamepad1.left_stick_y;

            
            float norm = (float) sqrt(sq(stick_x)+sq(stick_y));
            if(norm < threshold)
            {
                stick_x = 0;
                stick_y = 0;
            }
            else
            {
                float modifier = 1.0f;//(norm > 1.0f) 1.0f ? bezier(norm, 0.0f, 0.0f, 1.0f);
                float speed = (norm-threshold)/(1-threshold)/norm*modifier;
                stick_x *= speed;
                stick_y *= speed;
            }
            
            float left_power = stick_y-stick_x;
            float right_power = stick_y+stick_x;
            
            right_power = clamp(right_power, -1.0f, 1.0f);
            left_power = clamp(left_power, -1.0f, 1.0f);
            
            right_drive.setPower(right_power);
            left_drive.setPower(left_power);
            
            telemetry.addData("Text", "*** Robot Data***");
            telemetry.addData("left power", String.format("%.2f", left_power));
            telemetry.addData("right power", String.format("%.2f", right_power));
            telemetry.addData("raw stick x", String.format("%.2f", gamepad1.left_stick_x));
            telemetry.addData("raw stick y", String.format("%.2f", gamepad1.left_stick_y));
            telemetry.addData("stick x", String.format("%.2f", stick_x));
            telemetry.addData("stick y", String.format("%.2f", stick_y));
            
            waitOneFullHardwareCycle();
        }
    }
}
