#ifndef IK_SOLVER
#define IK_SOLVER

/*how to use:
  include this file in the body of your op mode
 */
#if 0
//example usage code
float hand_pos = new float[]{0.25f, 0.25f};

for ever
{
    //...
    hand_pos[0] += 0.01f*gamepad1.left_stick_x;
    hand_pos[1] += 0.01f*gamepad1.left_stick_y;
    
    float[] arm_targets = getArmTargets(hand_pos);
    //run shoulder motor to arm_targets[0] and the winch motor to arm_targets[1], getArmTargets does not adjust for gear ratios
}
#endif

//TODO: float trig functions, adjust for hand movement(depends on hopper design)

#define forearm_len 0.508f
#define upperarm_len 0.381f

#define elbow_radius .0254f
#define winch_radius .0254f

#define elbow_0 0.0f //the winch rotation where the winch length is 0
#define shoulder_0 0.0f //the shoulder rotation where the shoulder is pointing in the +x axis
#define shoulder_min (shoulder_0)
#define shoulder_max (shoulder_0+pi)

//derived constants:
#define elbow_1 (elbow_0+sqrt(sq(upperarm_len)-sq(elbow_radius))/winch_radius) //the winch rotation where the arm switches modes
#define elbow_2 (elbow_1+(2.0*pi-acos(elbow_radius/upperarm_len)-acos(elbow_radius/forearm_len))*elbow_radius/winch_radius) //the winch rotation where the arm is completely closed (toward the spring side)

/*
  inputs: hand[0] and hand[1] are the cordinates of the wanted hand position in meters, relative to the robot
  hand will be clamped if it is outside of the range of motion of the arm
 */
float[] getArmTargets(float[] hand)
{
    float[] arm_targets = new float[2]; //[0] -> shoulder, [1] -> elbow
    
    float dist = sqrt(sq(hand[0])+sq(hand[1]));
    //clamp hand motion
    if(dist > forearm_len+upperarm_len) hand = scale(normalize(hand), forearm_len+upperarm_len); //TODO: vector math library
    if(dist < forearm_len-upperarm_len) hand = scale(normalize(hand), forearm_len-upperarm_len); //TODO: vector math library
    //TODO: clamp when the arm will hit the frame
    
    float shoulder_offset = acos((sq(upperarm_len)+sq(dist)-sq(forearm_len))/(2.0f*dist*upperarm_len));
    arm_targets[0] = atan2(hand[1], hand[0])+shoulder_0;
    
    arm_targets[1] = dist/winch_radius+elbow_0;
    float shoulder_target = arm_targets[0]+shoulder_offset
    if(arm_targets[1] < elbow_1 && shoulder_target < shoulder_max)
    {
        arm_targets[0] += shoulder_target;
    }
    else
    {
        float elbow_offset = acos((sq(upperarm_len)+sq(forearm_len)-sq(dist))/(2.0f*upperarm_len*forearm_len));
        arm_targets[1] = elbow_2-elbow_offset*elbow_radius/winch_radius;
        arm_targets[0] -= shoulder_offset;
    }
        
    //outputs: arm_targets[1] and arm_targets[0] are the rotations of the elbow/winch and shoulder outputs in radians, respectively
    return arm_targets;
}
#endif
